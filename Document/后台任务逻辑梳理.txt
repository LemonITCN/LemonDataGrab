<!--POOLS-->
    任务待分发池  taskReadyToDistributePool
    任务已分发池  taskAlreadyDistributedPool
<!--POOLS-END-->


# 添加一个任务
1. 通过Post,请求一个添加任务
2. 收到请求以后,根据任务中描述的任务重复分发次数和任务分发时间,在数据库中创建出所有的待分发任务记录
3. 将任务状态初始置为: 待分发(0)


# 任务自动分发机制  -->OK
1. 在Servlet的指定Listener中,监听启动行为
2. 启动时,创建一个Timer计时器,约定:每N秒,执行一次分发处理逻辑
--> 分发处理逻辑
            1. 将数据库中当前时间X秒之前的所有待分发的任务(0)全部将其任务状态置为:任务结果采集超时(4)
            2. 从数据库中查询当前时间的X秒前到现在的,和当前时间Y秒后之内的所有待分发(0)任务
            3. 把加入到待分发池中的所有任务的状态,更改为: 准备分发(1)
            4. 把查询到的所有待分发任务插入到待分发池中(List)
            5. 判断当前是否存在 在线的数据采集终端,如果存在,那么继续,如果不存在,那么分发处理逻辑终止
            (SYNCHRONIZED , STATIC , SINGLE) FUNCTION_DISTRIBUTE{
                6. 对当前的所有在线数据采集终端,按照当前采集任务数进行数量从小到大的排序
                7. 对排序后的数据采集终端进行依次分发任务(分发提权任务以及正常当前时间的任务)
                8. 把分发出去的任务插入到已分发池中
                9. 将刚刚插入到已分发池中的所有任务的任务状态置为: 已经分发到数据采集终端(2)
                10. 将已分发池中的所有任务进行遍历,若发现任务的执行时间已经超时,那么将其从池中移除,并且将任务状态置为: 任务结果超时(4)
            }

# 一个数据采集终端被连入
1. 将新连入的数据采集终端,插入到数据采集终端队列的队头
2. 触发执行一次分发处理逻辑的FUNCTION_DISTRIBUTE


# 一个数据采集终端被断开
1. 将任务已分发池中的所有该数据采集终端对应的任务重新置新状态: 准备分发(1)
2. 将新置为准备分发状态的任务的插入到任务待分发池中


# 主控机服务器启动  --> OK
1. 初始化数据库连接池
2. 将数据库中所有的当前时间X秒之前的所有待分发的任务(0)全部将其任务状态置为:任务结果采集超时(4)
3. 启动MINA长连接服务器监听


# 主控机服务器关闭
1. 关闭MINA服务器监听,将已连接的所有设备断开
2. 将 待分发池中的所有准备分发(1)的任务 和 已分发池中的所有已分发到数据采集终端(2)的任务 的状态重新置为待分发(0)
        ->可以通过SQL将数据库中未超时的,且任务状态为1/2的任务的状态,重新更新成待分发(0)
3. 关闭数据库连接池


# 一个任务采集成功结果被回传
1. 将任务采集结果保存到数据库中,将任务的状态置为: 任务结果采集成功(3)
2. 将任务从已分发池中移除


# 一个任务采集失败结果被回传
1. 将任务采集结果保存到数据库中,将任务的状态置为: 任务结果采集失败(5)
2. 将任务从已分发池中移除